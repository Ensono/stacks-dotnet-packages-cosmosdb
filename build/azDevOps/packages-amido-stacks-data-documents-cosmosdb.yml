name: $(Build.SourceBranchName)-init

variables:
  # General Information
  - name: company
    value: "amido"
  - name: project
    value: "dotnet-pkgs"
  - name: domain
    value: "stacks"
  # Versioning
  - name: Version.Major
    value: 0
  - name: Version.Minor
    value: 2
  - name: Version.Revision
    value: $[counter(variables['Version.Minor'], 0)]
  - name: Version.Number
    value: $(Version.Major).$(Version.Minor).$(Version.Revision)
  # SelfConfig
  - name: self_repo
    value: stacks-dotnet-packages-cosmosdb
  - name: self_repo_dir
    value: "$(Agent.BuildDirectory)/s/$(self_repo)"
  - name: self_repo_tf_src
    value: deploy/azure/app/kube
  - name: self_repo_tf_dir
    value: "$(self_repo_dir)/$(self_repo_tf_src)"
  - name: self_pipeline_repo
    value: "$(Agent.BuildDirectory)/s/stacks-pipeline-templates"
  - name: self_pipeline_scripts_dir
    value: "$(self_pipeline_repo)/scripts"
  # DevOps Scripts Package Info
  - name: DevOps.File
    value: scripts-1.1.0-master.tar.gz
  - name: DevOps.Container
    value: packages
  - name: DevOps.storageAccount
    value: amidostacksuksprod
  - name: DevOps.RG
    value: amido-stacks-rg-uks-prod
  # Path specific for this package, change accordingly
  - name: Package.Feed
    value: "Stacks"
  - name: Package.Public
    value: true
  - name: Package.nuget_service_connection
    value: NuGetAmidoStacksServiceConnection
  - name: Package.Path
    value: "src/Amido.Stacks.Data.Documents.CosmosDB"
  - name: Test.Path
    value: "$(Package.Path).Tests"
  - name: BuildPipeline.Path
    value: "build/azDevOps/packages-amido-stacks-data-documents-cosmosdb.yml"
  # Environment Vars required for any tests go here:
  - name: CosmosDB__DatabaseContainer
    value: SampleEntity
  # Yamllint
  - name: yamllint_config_file
    value: "${{ variables.self_repo_dir }}/yamllint.conf"
  - name: yamllint_scan_directory
    value: "."
  # Tf State Config
  - name: tf_state_rg
    value: amido-stacks-rg-uks
  - name: tf_state_storage
    value: amidostackstfstategbl
  - name: tf_state_container
    value: tfstate
  - name: tf_state_key
    value: dotnet-packages

# Trigger paths specific for this package, change accordingly
trigger:
  branches:
    include:
    - 'main'
  paths:
    include:
    - '*'

# Only build PRs into Main
pr:
  branches:
    include:
      - main

resources:
  repositories:
    - repository: templates
      type: github
      name: amido/stacks-pipeline-templates
      ref: refs/tags/v1.4.22
      endpoint: amidostacks # Created when you set up the connection to GitHub from Azure DevOps
  containers:
    - container: k8s_deploy
      image: amidostacks/ci-k8s:0.0.11
    - container: terraform_custom
      image: amidostacks/ci-tf:0.0.4

stages:
  - stage: BuildAndDeploy
    variables:
      - group: amido-stacks-infra-credentials-nonprod
    jobs:
      - job: Validation
        pool:
          vmImage: "ubuntu-18.04"
        steps:
          - checkout: self

          - checkout: templates

          # Update Build Number
          - template: azDevOps/azure/templates/v2/steps/build-updatebuildnumber-dotnet.yml@templates
            parameters:
              sourcebranch_name: "$(Build.SourceBranchName)"
              raw_version_number: "$(Version.Number)"

          # Validates all YAML files in the repo to check they adhere to standards
          - template: azDevOps/azure/templates/v3/steps/build/test-validate-yaml.yml@templates
            parameters:
              pipeline_scripts_directory: "${{ variables.self_pipeline_scripts_dir }}"
              container: "k8s_deploy"
              yamllint_config_file: "${{ variables.yamllint_config_file }}"
              yamllint_scan_directory: "${{ variables.yamllint_scan_directory }}"

          # Runs a terraform fomatting check and a validation check
          - template: azDevOps/azure/templates/v3/steps/build/test-validate-terraform.yml@templates
            parameters:
              pipeline_scripts_directory: "${{ variables.self_pipeline_scripts_dir }}"
              terraform_container: "terraform_custom"
              terraform_directory: "${{ variables.self_repo_tf_dir }}"

      - job: AppInfraDeploy
        dependsOn: Validation
        container: terraform_custom
        pool:
          vmImage: ubuntu-18.04
        steps:
          - checkout: self

          - checkout: templates

          - template: azDevOps/azure/templates/v2/steps/deploy-terraform-resource.yml@templates
            parameters:
              # Terraform Basic Config
              terraform_working_dir: "$(Agent.BuildDirectory)/s/$(self_repo)/$(self_repo_tf_src)"
              # changing this would require changing the downstream consumers of these outputs
              #
              terraform_output_artefact: "tfoutputs"
              # Terraform State Config
              terraform_backend_client_id: $(azure_client_id)
              terraform_backend_client_secret: $(azure_client_secret)
              terraform_backend_tenant_id: $(azure_tenant_id)
              terraform_backend_subscription_id: $(azure_subscription_id)
              terraform_state_rg: $(tf_state_rg)
              terraform_state_storage: $(tf_state_storage)
              terraform_state_container: $(tf_state_container)
              terraform_state_key: $(tf_state_key)
              # Azure Config
              azure_client_id: "$(azure_client_id)"
              azure_client_secret: "$(azure_client_secret)"
              azure_tenant_id: "$(azure_tenant_id)"
              azure_subscription_id: "$(azure_subscription_id)"
              # for branch based builds this can be $(Build.SourceBranchName)
              terraform_state_workspace: dev
              # Global Config
              company: $(company)
              project: $(project)
              environment: ""
              azure_cli_providers: []
              tags: ""
              # Terraform Resource Specific Config
              terraform_extra_properties:
                {
                  TF_VAR_name_company: $(company),
                  TF_VAR_name_project: $(project),
                  TF_VAR_name_domain: $(domain),

                  TF_VAR_cosmosdb_sql_container: "$(CosmosDB__DatabaseContainer)",
                  TF_VAR_cosmosdb_sql_container_partition_key: "/OwnerId",
                  TF_VAR_cosmosdb_kind: "GlobalDocumentDB",
                  TF_VAR_cosmosdb_offer_type: "Standard",

                  TF_VAR_stage: "pkgs",

                  TF_VAR_resource_group_location: northeurope,
                }
              terraform_output_commands: |
                raw_tf=$(terraform output -json | jq -r 'keys[] as $k | "##vso[task.setvariable variable=\($k);isOutput=true]\(.[$k] | .value)"')
                readarray -t outputs <<<"$raw_tf"
                for i in "${outputs[@]}"; do echo "$i"; done

      - job: BuildAndDeployPackage
        dependsOn: AppInfraDeploy
        pool:
          vmImage: "windows-2019"
        continueOnError: false
        variables:
          CosmosDb__DatabaseName: $[ dependencies.AppInfraDeploy.outputs['tfoutputs.cosmosdb_database_name'] ]
          CosmosDb__DatabaseAccountUri: $[ dependencies.AppInfraDeploy.outputs['tfoutputs.cosmosdb_endpoint'] ]
          COSMOSDB_KEY: $[ dependencies.AppInfraDeploy.outputs['tfoutputs.cosmosdb_primary_master_key'] ]
        steps:
          - template: azDevOps/azure/templates/v2/steps/build-dotnet-package.yml@templates
            parameters:
              # Build Config
              test_path: "$(Test.Path)"
              package_path: "$(Package.Path)"
              # Deploy Config
              package_feed: "$(Package.Feed)"
              publish_symbols: true
              publish_public: "$(Package.Public)"
              nuget_service_connection: "$(Package.nuget_service_connection)"
              # .NET Core version variables
              dotnet_core_version: "3.1.x"
